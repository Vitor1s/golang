 O que √© tipo em go? 

 :: Tipo ele tem uma caracteristica definida exemplo  fmt.Println("Hello Word") O "Hello Word" e um tipo (string)


O que √© tipo numero? 

:: Tipo numero quando vamos usar temos 2 op√ß√≤es "int" ou "float32" ou "float64"  int = quando s√£o inteiros tipo 1,2,10,20,30 ja os float √© quando temos numeros quebrados 2.5 10.6 e por ai vai.

Tipos dentro de uma string

:: Temos algumas fun√ß√µes que s√£o usadas dentro de uma string como o len que conta a quantidade dois caracteries tem o [3] que mostra o numero refente aquela letra e temos a soma de strings "ola + "Tudo bem"

OBS = No len se tiver acentos pode ser que ele conte como uma letra a mais.

OBS = No "[]" ele retorna nao a letra em si e sim o c√≥digo Unicode/ASCII 
 

 O que  s√£o Boleanos? 

 :: S√£o express√µes logicas que vem da matematica onde usamos algumas express√µes para definir se ser true or false, onde cada express√£o remete a um retorno de true or false onde && = sendo (e) isso faz que quando tenha um false sempre seja false, || = Esse √© (ou) sempre prevalesse o true por ser true ou false, ! = Esse vem composto pelo contrario do que estamos colocando se for !false o resultado e o oposto que seria true e se fro !true vem o oposto que  √© false

Express√µes  

true && true =  true   (e)         true || true = true  (ou)      !true = false (nega√ß√£o) 
 
true && false = false  (e)         true || false = true (ou)      !false = true (nega√ß√£o)

false && true = false  (e)         false || true = true (ou)

false && false = false (e)         false || false = false (ou)



O que s√£o inferencia de Tipos?

:: A inferencia acontece pelo fato do Go ja entender o qu e√© uma string, int, float, ele ja entende que quando coloco algo entre "aspas" ele sabe que √© uma string, coloquei um numero 40  ele sabe que √© int e um numero quebrado 4.5 sabe que √© um float 


Palavras reservadas e como funcionam? 

:: Palavras reservadas em Go s√£o termos pr√©-definidos que fazem parte da linguagem. Elas n√£o podem ser usadas como nome de vari√°veis, fun√ß√µes ou qualquer outro identificador criado pelo programador.

Controle de fluxo:
if     | else     | switch   | case      | for
break  | continue | goto     | fallthrough

Declara√ß√µes e defini√ß√µes:
var    | const    | func     | type      | struct
interface | package | import | return

Concorr√™ncia:
go     | select   | chan

Outros:
defer  | range    | map



Como usar: 

#### Controle de fluxo

if           condi√ß√£o (se)                                          if x > 10 {fmt.Println("Maior")}

else         Sen√£o                                                  else {fmt.Println("Menor")}

switch       Varios casos para uma vari√°vel                         switch dia {case "Segunda":}

case         case dentro do switch                                  case "Ter√ßa": fmt.Println("3")

for          la√ßo de repeti√ß√£o                                      for  i := 0; i < 5; i++ {.....}

break        interrompe um la√ßo no switch                           if x == 5 {break}

continue     Pula para a proxima intera√ß√£o do for                  if x%2 == 0 {contiue}

goto         Vai direto para um r√≥tulo (pouco usado)               goto FIM ..... FIM:

fallthrough  For√ßa a execu√ß√£o do proximo case no switch            case 1: fmt.Println("UM"); 
                                                                   fallthrough  


#### Declara√ß√µes e Defini√ß√µes

var        Decalra vari√°vel                  var nome string = "Vitor"

const      Declara constante(valor fixo)     const PI = 3.14

func       Declara fun√ß√£o                    func soma(a, b int) int {......}

type       Cria novo tipo                    type Pessoa struct {Nome string}

struct     Cria estrutura(tipo composto)     struct { Nome string}

package    Define pacode atual do arquivo    package main

import     importa pacotes                   import "fmt"

return     Retorna um valor de uma fun√ß√£o    return a + b



#### Concorr√™ncia

go     Executa fun√ß√£o de forma concorrente  go minhaFuncao()

select Escolhe entre m√∫ltiplos canais       select {case x := <-canal: ....}

chan   Cria canal para cominica√ß√£o          c := make(chan int)


#### Outros

defer  Adia execu√ß√£o ate o final da fun√ß√£o   defer fmt.Println("fim")

range  itera soibre array, slce, map, etc.   for i, v := range lista {.....}

map   Estrutura de chave ->                  map[string]int{"a": 1}



Express√µpes e comandos 

- Comando de repeti√ß√£o: fer
- Comando de atribui√ß√£o: :=
- Comando de declara√ß√£o: var
- Comando de Condicionais:if, switch


Variaveis 
 O que s√£o variaveis
:: Aprendi como funciona uma variavel em GO. Chamamos o packge main no inicio da pagina que o nome coloco do arquivo fazemos a importa√ß√†o do fmt e depois criamos a fun√ß√†o com func e dentro colocamos a varaiavel que chamamos com var que √© uma palavra reservada do go dei o nome de x, como o go ja reconehce como string devido a forma como estou nomendo o x que √© com "Hello Word" nao precisei definir o tipo, e depois para chamar essa variavel usei o fmt que importei com comand Println(x) e ao rodar ele retorna o valor de x.

Obs:: Ela √© esclusiva para armazenar um tipo especifico. 
Obs2:: Descobri tambem que e possivel  chamar o nome do var de forma diferente em vez de seta var x string = "Hello" voce pode fazer assim var z string  depois voce define o tipo chamando a variavel z = "Hello".


Blocos e escopos 

::Ate o momento entendo que bloco √© a variavel, quando montada ser torna um bloco  

Ex:: var x string = "Hello", isso √© um bloco que pode ser usado ate mesmo fora da func(fun√ß√£o) desde de que o fmt.Println que ira printar o nome(tipo) dessa funb√ß√£o esteja dentro da func(fun√ß√£o)


Arrays, Fatias e Mapas

O que s√£o?
:: Entendi que uma array e uma sequancia de elementos, tipo 0, 1, 2, 3, 4, 5. mas pode ser uma sequancia de um numero elemento como 0, 0, 0, 0, 0, onde so tera um tipo compondo por um tamanho fixo. 
:: A Fatia e coposta por uma parte da nossa array tambem com um unico tipo, mas com tamanhao variavel.
:: E o Mapas ele serve realmente como um mapa mas para procurar o valor de acordo com a palavra associada, conhecido tambem como tabelas hash, arrays associativos ou dicion√°rios.

:: Aprendi como funciona uma variavel em GO. Chamamos o packge main no inicio da pagina que o nome coloco do arquivo fazemos a importa√ß√†o do fmt e depois criamos a fun√ß√†o com func e dentro colocamos a varaiavel que chamamos com var que √© uma palavra reservada do go dei o nome de x, como o go ja reconehce como string devido a forma como estou nomeando o x que √© com "Hello Word" nao precisei definir o tipo, e depois para chamar essa variavel usei o fmt que importei com comand Println(x) e ao rodar ele retorna o valor de x.


Abstra√ß√µes 

:: Esconde detalhes desnecessarios do programa, e tibo nao saber como e feito um alimento processado voce s√© consome. tipo quero comer um peito de franco, compro no mercado e como peito de frango, como foi feito nao importa.


Parametros

:: Basicamente temos a fun√ß√£o cumprimentar pode ser chamada v√°rias vezes com argumentos diferentes, porque definimos dentro dela um par√¢metro chamado nome, que √© como um espa√ßo reservado.
   Esse par√¢metro nome vai ser substitu√≠do por qualquer valor (argumento) que eu colocar dentro dos par√™nteses, tipo "√înibus", "Vitor" ou "Caf√©".
   Isso significa que estamos usando o mesmo par√¢metro para receber diferentes argumentos, e a fun√ß√£o se comporta conforme o valor que chega.


   
Estruturas

:: Conhecido como struct, √© a melhor forma de organizar dados no go, por nao termos objetos e classes usamos a struct, sua estrutura e composta por.

	 type Pessoas struct{          
    nome string
    idade int
    altura float32
   } 

   pessoa := Pessoas{"Vitor", 25, 1.80}
   fmt.Println(pessoa)



Sistemas de tispos 

:: Voc√™ est√° no caminho certo com a ideia, mas vamos **ajustar sua explica√ß√£o** pra ficar mais clara e correta:

---

### ‚úÖ Corre√ß√£o da sua explica√ß√£o:

**Sistemas de tipos**

:√â o conjunto de regras que define **quais tipos de valores** (como `int`, `float32`, `string`, etc.) **uma linguagem permite e como esses tipos podem ser usados**. Em Go, cada valor tem um tipo bem definido, e o compilador verifica isso para evitar erros. Por exemplo, voc√™ n√£o pode somar um n√∫mero com uma string.

---

### üß† Em outras palavras (bem simples):

> O sistema de tipos √© como se o Go falasse:
> ‚ÄúMe diga exatamente o que cada coisa √© (n√∫mero, texto, decimal...), que eu cuido pra voc√™ n√£o misturar tudo e causar erro.‚Äù

---

### ‚úÖ Exemplo simples em Go:

```go
var idade int = 25
var nome string = "Vitor"

// Isso daria erro:
fmt.Println(idade + nome) // ‚ùå n√£o pode somar n√∫mero com texto
```

Go vai te impedir de fazer esse tipo de mistura porque ele tem um sistema de tipos **forte e est√°tico** (ou seja, r√≠gido e verificado em tempo de compila√ß√£o).


Interface e Exce√ß√µes

